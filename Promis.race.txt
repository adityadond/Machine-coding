function promiseRace(promises) {
    return new Promise((resolve, reject) => {
        promises.forEach(promise => {
            Promise.resolve(promise)
                .then(value => {
                    resolve(value);
                })
                .catch(reason => {
                    reject(reason);
                });
        });
    });
}

// Example usage
const promise1 = new Promise((resolve, reject) => setTimeout(() => resolve('Promise 1 resolved'), 1000));
const promise2 = new Promise((resolve, reject) => setTimeout(() => reject('Promise 2 rejected'), 500));
const promise3 = new Promise((resolve, reject) => setTimeout(() => resolve('Promise 3 resolved'), 1500));

// Using promiseRace function
promiseRace([promise1, promise2, promise3])
    .then(value => {
        console.log('First promise to settle:', value); // Output: First promise to settle: Promise 2 rejected
    })
    .catch(reason => {
        console.error('At least one promise rejected:', reason); // This won't be executed in this example
    });
